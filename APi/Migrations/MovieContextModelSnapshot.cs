// <auto-generated />
using System;
using APi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APi.Migrations
{
    [DbContext(typeof(MovieContext))]
    partial class MovieContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("FechaNac")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naciolanidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85ac628b-d3f6-4854-a572-7f3a45e1416c"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9200),
                            FechaNac = new DateOnly(1, 1, 1),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Tom Hanks"
                        },
                        new
                        {
                            Id = new Guid("0bc88250-093d-4064-a636-ef8646f60221"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9203),
                            FechaNac = new DateOnly(1, 1, 1),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Scarlett Johansson"
                        },
                        new
                        {
                            Id = new Guid("12bd485e-8de8-4d90-82c2-4b5c37e20a4b"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9219),
                            FechaNac = new DateOnly(1, 1, 1),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Robert Downey Jr."
                        });
                });

            modelBuilder.Entity("ActorPersonaje", b =>
                {
                    b.Property<Guid>("ActoresId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonajesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActoresId", "PersonajesId");

                    b.HasIndex("PersonajesId");

                    b.ToTable("ActorPersonaje");
                });

            modelBuilder.Entity("Genero", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naciolanidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e871da67-dad5-402a-b259-974a1ef931ec"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9090),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Acción"
                        },
                        new
                        {
                            Id = new Guid("cfec501c-cc98-46be-9950-7ef36525bf2f"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9120),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Drama"
                        },
                        new
                        {
                            Id = new Guid("54b3578e-9bc1-414b-a65b-f066aa9cdbb7"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9122),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Nombre = "Comedia"
                        });
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.Property<Guid>("GeneroId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeliculasId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GeneroId", "PeliculasId");

                    b.HasIndex("PeliculasId");

                    b.ToTable("GeneroPelicula");
                });

            modelBuilder.Entity("Pelicula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnioLanzamiento")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naciolanidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pelicula");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa1ad74f-5f83-4602-90c5-617e9acef494"),
                            AnioLanzamiento = 2019,
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9250),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Titulo = "Avengers: Endgame"
                        },
                        new
                        {
                            Id = new Guid("a2f5b4f3-38a7-4547-b65a-4ded5f6fb615"),
                            AnioLanzamiento = 1994,
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9303),
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            Titulo = "Forrest Gump"
                        });
                });

            modelBuilder.Entity("PeliculaPersonaje", b =>
                {
                    b.Property<Guid>("PeliculasId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonajesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PeliculasId", "PersonajesId");

                    b.HasIndex("PersonajesId");

                    b.ToTable("PeliculaPersonaje");
                });

            modelBuilder.Entity("Personaje", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Naciolanidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombrePersonaje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Personaje");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81034819-47bd-4d8f-8574-d837f9949f87"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9337),
                            Descripcion = "",
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            NombrePersonaje = "Iron Man"
                        },
                        new
                        {
                            Id = new Guid("b34428e3-657f-469f-99ef-f0e6406cfb13"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9339),
                            Descripcion = "",
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            NombrePersonaje = "Forrest Gump"
                        },
                        new
                        {
                            Id = new Guid("6ccb00ce-3207-4d23-8e08-b8f3e9702ca1"),
                            CreatedOn = new DateTime(2023, 11, 28, 17, 18, 38, 158, DateTimeKind.Utc).AddTicks(9341),
                            Descripcion = "",
                            IsDeleted = false,
                            Naciolanidad = "n/d",
                            NombrePersonaje = "Black Widow"
                        });
                });

            modelBuilder.Entity("ActorPersonaje", b =>
                {
                    b.HasOne("Actor", null)
                        .WithMany()
                        .HasForeignKey("ActoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personaje", null)
                        .WithMany()
                        .HasForeignKey("PersonajesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.HasOne("Genero", null)
                        .WithMany()
                        .HasForeignKey("GeneroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Pelicula", null)
                        .WithMany()
                        .HasForeignKey("PeliculasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeliculaPersonaje", b =>
                {
                    b.HasOne("Pelicula", null)
                        .WithMany()
                        .HasForeignKey("PeliculasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personaje", null)
                        .WithMany()
                        .HasForeignKey("PersonajesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
